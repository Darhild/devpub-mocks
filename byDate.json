
{
  "count": 2,
  "posts": [
    {
      "id": 344,
      "time": "2019-06-07 10:36",
      "user": {
        "id": 88,
        "name": "Дмитрий Петров"
      },
      "title": "Ужасы чужого кода: как найти смысл и не умереть",
      "announce": "В жизни каждого разработчика наступает момент, когда нужно взяться за код, написанный другим человеком. Это может быть связано с поддержкой старого проекта, оптимизацией legacy-кода, переделыванием приложения, которое не доделал другой программист.",
      "text": "&lt;p&gt;&lt;em&gt;&lt;strong&gt;Нельзя стать хорошим разработчиком, если не создавать проекты. Но никто не должен решать за вас, какие проекты вам подходят. Чтобы стать хорошим разработчиком, нужно пройти определенный путь и написать несколько проектов. В этой статье мы поразмышляем о том, какой путь правильный, какие проекты точно нужно выполнить и как не стать жертвой чужого влияния.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Инструкция, которая подойдёт каждому&lt;/h2&gt;&lt;p&gt;Часто можно наткнуться на публикации, в которых новичкам предлагают выполнить конкретные проекты: TODO-листы, блоги, методы сортировки и их визуализаторы и прочее. Выполнишь &mdash; станешь профессионалом.&lt;/p&gt;&lt;p&gt;Я считаю, что программист никому ничего не должен (разве что заказчику, который уже внес предоплату). Каждый разработчик, даже новичок, должен сам определить, что он будет делать и какой путь пройдёт.&lt;/p&gt;&lt;p&gt;Давайте я объясню, почему нельзя делать проекты под копирку.&lt;/p&gt;&lt;h2&gt;Это неинтересно&lt;/h2&gt;&lt;p&gt;Многим разработчикам действительно комфортно делать такие приложения, потому что это уже протоптанная дорожка и можно найти кучу материалов по этой теме.&lt;/p&gt;&lt;p&gt;Но они сразу их бросят, когда поймут, что выросли достаточно, чтобы начать что-то более серьёзное. Зачем цепляться за проект, который вы начали только потому, что он простой?&lt;/p&gt;&lt;p&gt;Я считаю, что браться за что-то стоит только в том случае, если вы искренне заинтересованы в этом и горите идеей. Тогда у вас будет эмоциональная связь с проектом.&lt;/p&gt;&lt;p&gt;Конечно, ненавидеть своё детище будете в любом случае &mdash; с каждым днем будете всё яснее понимать, что делали фигню. Что вообще все тут надо сжечь и переписать. Если нет эмоциональной связи, то вы теряете интерес и бросаете проект, чтобы начать что-то другое и на этот раз сделать все правильно. А потом делаете то же самое с новым проектом. И с ещё одним / двумя / пятью / десятью / пятьюдесятью. Разумеется, вы получите опыт, но вместе с ним &mdash; и груз в виде брошенных проектов.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Поэтому смелее делайте то, что вам больше нравится. Пишите игровые движки, создавайте интернет-магазины уровня Amazon, попытайтесь запилить второй VK (или Facebook &mdash; я никого не осуждаю). Делайте то, для чего вы на самом деле пришли в программирование.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Это несложно&lt;/h2&gt;&lt;p&gt;В каждом проекте должен быть вызов. Всем кажется, что создать TODO-лист просто. Поэтому если бросить его, то потом всю жизнь придётся корить себя за то, что не справился с таким пустяком. Если же изначально брать что-то очень сложное, то в любом случае вы останетесь победителем. Справились &mdash; отлично, теперь вы знаете, что можете работать над сложными проектами. Не получилось &mdash; тоже хорошо, такой опыт не на каждой задаче получишь.&lt;/p&gt;&lt;h2&gt;Это неэффективно&lt;/h2&gt;&lt;p&gt;Какой толк от 100500 одинаковых приложений? Нужно учить программистов не делать что-то под копирку, а создавать новое. Или хотя бы решать проблемы.&lt;/p&gt;&lt;p&gt;Это поможет стать более ценным специалистом. Потому что вы будете понимать, что нужно бизнесу, и всегда сможете запрограммировать как надо или предложить альтернативу.&lt;/p&gt;&lt;p&gt;Например, заказчику нужно на сайте изменить какую-то надпись. Допустим, поменять сообщение, которое уведомляет об использовании cookies, или заменить на сервере файл политики конфиденциальности.&lt;/p&gt;&lt;p&gt;Обе задачи на 5 минут: 3 минуты, чтобы запустить редактор кода и FTP-клиент, по одной минуте на каждую задачу.&lt;/p&gt;&lt;p&gt;Но если подумать, то можно найти решение лучше. Например, можно предложить заказчику добавить новые настройки в панель администратора, чтобы он мог выполнять такие мелочи самостоятельно.&lt;/p&gt;&lt;p&gt;Тогда вы сможете тратить свое время на что-то более полезное, а не отвлекаться 10 раз, потому что в надписи, которую вы добавили, была опечатка.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Не создавайте программы &mdash; создавайте решения!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Это нереально&lt;/h2&gt;&lt;p&gt;Часто подборки проектов для новичков никак не связаны с реальной жизнью. Да, вы получите навыки выполнения каких-то общих вещей. Но не будете знать, как это устроено в определённой сфере.&lt;/p&gt;&lt;p&gt;Можно выполнить 500 абстрактных проектов, но какой в этом толк, если вы так и не узнаете, что от таких проектов требуют заказчики?&lt;/p&gt;&lt;p&gt;Раз проекты неинтересны, а их создание не приносит пользу, то они должны хотя бы отражать реальность. Да, новичку может быть сложно взять такой проект у реального заказчика. Но именно это и нужно попытаться сделать.&lt;/p&gt;&lt;p&gt;Вам придется работать в жёстких условиях, чтобы довести проект до конца, но зато этот опыт будет самым ценным и реальным. Ну и, разумеется, вы научитесь общаться с клиентами.&lt;/p&gt;&lt;h2&gt;Напоследок&lt;/h2&gt;&lt;p&gt;Главное, что я хочу донести, &mdash; не нужно думать, что вы должны пройти строго определённый кем-то путь, чтобы стать профессионалом. Вам действительно нужно изучить конкретные подходы и инструменты, но как это сделать, решаете вы сами.&lt;/p&gt;&lt;p&gt;Главное, чтобы путь был интересен вам, а не кому-то из интернета. Беритесь за то, что интересно, даже если это кажется очень сложным или невыполнимым. Главное &mdash; довести до конца хотя бы один-два проекта.&lt;/p&gt;&lt;p&gt;Зато результат ваших усилий будет стоить того. Особенно ясно вы это поймете, когда к концу курса закончите несколько проектов, которые не стыдно будет показать друзьям.&lt;/p&gt;",
      "comments": [
        {
          "id": 776,
          "time": "Вчера, 17:32",
          "user": {
            "id": 89,
            "name": "Алексей Антонов"
          },
          "text": "Теперь количество хороших программистов значительно увеличится. Возьму на заметку!"
        },
        {
          "id": 777,
          "time": "2019-12-17 00:32",
          "user": {
            "id": 87,
            "name": "Антон Иванов"
          },
          "text": "Автор молодец, правильно продвигает блог. Сейчас тоже задумываюсь о программировании."
        },
        {
          "id": 778,
          "time": "2019-12-17 00:38",
          "user": {
            "id": 81,
            "name": "Евгения"
          },
          "text": "&lt;p&gt;&lt;em&gt;Нельзя стать хорошим разработчиком, если не создавать проекты. Но никто не должен решать за вас, какие проекты вам подходят. Чтобы стать хорошим разработчиком, нужно пройти определенный путь и написать несколько проектов. В этой статье мы поразмышляем о том, какой путь правильный, какие проекты точно нужно выполнить и как не стать жертвой чужого влияния.&lt;/em&gt;&lt;/p&gt; - вот это просто отличные слова!"
        }
      ],
      "tags": [
        "разработка", "инструкции"
      ],
      "likeCount": 13,
      "dislikeCount": 4,
      "commentCount": 3,
      "viewCount": 23
    },
    {
      "id": 345,
      "time": "2019-12-15 17:32",
      "user": {
        "id": 77,
        "name": "Дмитрий Петров"
      },
      "title": "Устраняем уязвимости: как защитить сайт от SQL-инъекции",
      "announce": "Заводишь сайт, наполняешь его контентом, запускаешь рекламную кампанию — трафик стабильно растет, пользователи активно комментируют и делятся статьями. Всё хорошо до того момента, пока в один не предвещающий беды день на сайте не оказывается ни одной статьи. Заходишь в лог запросов и видишь, что кто-то сделал DROP.",
      "text": "Заводишь сайт, наполняешь его контентом, запускаешь рекламную кампанию — трафик стабильно растет, пользователи активно комментируют и делятся статьями. Всё хорошо до того момента, пока в один не предвещающий беды день на сайте не оказывается ни одной статьи. Заходишь в лог запросов и видишь, что кто-то сделал DROP.",
      "tags": [
        "php", "sql", "postgres"
      ],
      "likeCount": 56,
      "dislikeCount": 16,
      "commentCount": 7,
      "viewCount": 102
    }
  ]
}
